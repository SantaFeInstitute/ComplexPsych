
# Tasos - Demo Plots ------------------------------------------------------

# Import or install the packages below
library(tidyverse) # or install.packages()
library(RColorBrewer)
library(showtext)

# -------------------------------------------------------------------------
# Use a folder in your pc as the Working direcotry for this script and the 
# plot outputs
userwd <- '/Users/tasospsy/Google Drive/Software_projects/ComplexityBoek/rfigures/'
setwd(userwd)

# Download and import the font into R using the lines below
fonturl <- 'https://github.com/tasospsy/complexity_book/raw/main/SFI%20specs/ComplexMind-Fonts/cmunbmr.ttf'
download.file(fonturl, basename(fonturl))
font_add(family = "CMU-bright", regular = "cmunbmr.ttf")
#font_add_google('EB Garamond')
showtext_auto()
#Check if font was added
font_families()

# -------------------------------------------------------------------------

# Important objects
colors <- RColorBrewer::brewer.pal(8, 'Dark2')[c(3,4,7,8)]
chapter <- 'ch3'
cfont <- "CMU-bright"
# -------------------------------------------------------------------------
# Values to test ----------------------------------------------------------

## These are the values you can play around to check the output (V1-V8)
V1 <- 13 #Text size in facets
V2 <- 18 # Plot title size
V3 <- .15 # grid line width
V4 <- 15 # Axes text size
V5 <- 23 # Axes title size
V6 <- .35 #Axes linewidth
V7 <-  17 # Legend title size
V8 <- 14 # Legend text size

## RUN it, NOT CHANGE IT
theme1 <- theme(# GENERAL
                plot.background = element_rect(fill = "white", color = NA), #background color
                text = element_text(family = cfont, color = "grey10"), # color of all text in the plot 
                strip.text = element_text(colour = "grey10", size = V1), # specs of the text inside plot
                plot.title = element_text(hjust = 0.5, color = "grey10", size = V2), # specs of the title
                # GRID
                panel.grid.major.x = element_line(linewidth = V3), # change the grid layout
                panel.grid.major.y = element_line(linewidth = V3), # change the grid layout
                panel.grid.minor.x = element_blank(), # remove the grid layout
                panel.grid.minor.y = element_blank(), # remove the grid layout
                # AXES
                axis.text=element_text(size=V4, color = "grey10"), # specs of the text in axis
                axis.title.x = element_text(size = V5, family = cfont), # Font family for x-axis label
                axis.title.y = element_text(size = V5,family = cfont), # Font family for y-axis label
                axis.line = element_line(linewidth = V6, colour = "grey10"),
                # LEGEND
                legend.title = element_text(size = V7,family = cfont), # Font family for legend title
                legend.position = "bottom", 
                #legend.title = element_blank(), # remove legend title,
                legend.text = element_text(size = V8),
                legend.key.size = unit(0.1, 'in'),
                # MARGINS
                plot.margin = unit(c(1,1,1,1), "lines"),
                #plot.tag.position = 'right',
                #plot.tag = element_text(
                #  size = 13,                     # Font size
                #  hjust = 1,                     # Horizontal adjustment
                #  vjust = 1,                     # Vertical adjustment
                #  angle = -90,                   # Font angle
                #  margin = margin(0, 0, 0, 10)), # Margins (t, r, b, l)
                #plot.subtitle =   element_text(
                #  size = 13,                     # Font size
                #  hjust = .5,                     # Horizontal adjustment
                #  vjust = 1,                     # Vertical adjustment
                #  margin = margin(0, 0, 5, 0)) # Margins (t, r, b, l)
)


# DEMO PLOTS --------------------------------------------------------------

# One-color Demo plot -----------------------------------------------------
cars %>% tibble() %>% 
  ggplot() +
  geom_point(aes(x = speed, y = dist, color = dist), size = 1.5) + 
  geom_point(aes(x = speed, y = dist), color = colors[1], shape = 1, size = 1.5) + 
  scale_color_gradient(low = 'white', high = colors[1])+
  labs(title = '', 
       x = 'X axis', 
       y = 'Y axis ') + theme_minimal() +
  theme1

#!
# HERE, using 'ggsave' function you can extract the plot with given dimensions
# The plot is saved to the wd we used before. (you can change it ofc if youd like)

## check %03d
ggsave('CSRP_ch3_Fig_001.png', width = 3.5, height = 3, units = 'in', dpi = 300)
dev.off()

# Multi-color Demo plot ---------------------------------------------------
cars %>% mutate(type = case_when(speed <= 13 ~ 'slow', 
                                 speed >= 20 ~ 'fast',
                                 TRUE ~ 'med')) %>% 
  ggplot() +
  geom_point(aes(x = speed, y = dist, color = type, shape = type), size = 1) + 
  scale_color_manual(values = colors)+
  labs(title = '', 
       x = 'X axis', 
       y = 'Y axis ') + theme_minimal() +
  theme1

## check %03d
ggsave('CSRP_ch3_Fig_002.png', width = 4.5, height = 3, units = 'in', dpi = 300)
dev.off()
